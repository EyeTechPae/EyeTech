# Python 2/3 compatibility
from __future__ import print_function
import numpy as np
import cv2
from time import sleep
import sys
import functools as ft
import time
def locate(img, flow, step=32):
	#print(lines)
	h, w = img.shape[:2]
	y, x = np.mgrid[step/2:h:step, step/2:w:step].reshape(2,-1).astype(int)
	#print(x,y)
	fx, fy = flow[y,x].T
	vis = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
	i=0
	isMov=False
	for flowx in fx:
		#print(flowx)
		if abs(flowx)>1.5:
			#if flowx<0:
				#print("direccio correcte")
			#else:
				#print("va al reves!!")
			posx=x[i]
			posy=y[i]
			isMov=True
			#print(posx,posy)
			#if posy>100 and posy<200:
				#cv2.rectangle(vis,(posx,posy),(posx+20,posy+20),(0,0,255),2)
		i=i+1


	return isMov
	

def haar(img):
	car_cascade = cv2.CascadeClassifier('cars3.xml')	
	cars = car_cascade.detectMultiScale(img, 1.1, 1) 
	fheight, fwidth = img.shape 
	for (x,y,w,h) in cars:
		print(x,y)
		if y>100 and y<300:
			cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)
	return img

def getDisplacement(img, flow, step=16):
	h, w = img.shape[:2]
	y, x = np.mgrid[step/2:h:step, step/2:w:step].reshape(2,-1).astype(int)
	fx, fy = flow[y,x].T
	#print(fx,fy)
	return (ft.reduce(lambda x, y: x + y, fx) / len(fx), ft.reduce(lambda x, y: x + y, fy) / len(fy))
t=time.time()
fourcc = cv2.VideoWriter_fourcc(*'XVID')
vc = cv2.VideoCapture('sample4.mp4')
out = cv2.VideoWriter('output.avi',fourcc, 30.0, (360,240))
rval, prev = vc.read()
prevgray = cv2.cvtColor(prev, cv2.COLOR_BGR2GRAY)
show_hsv = False
show_glitch = False
cur_glitch = prev.copy()
rval, img = vc.read()
sk_frame = 0
z=0;
ncars = 0 
roi = [0,0,0,0]
lastdetected = 0
detections = 0 
while rval:
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    if z>=sk_frame:
        flow = cv2.calcOpticalFlowFarneback(prevgray, gray, None, 0.5, 2, 20, 3, 7, 1.5, flags=cv2.OPTFLOW_FARNEBACK_GAUSSIAN)
        prevgray = gray
        #x, y = getDisplacement(gray, flow)
        #draw_img, lines=draw_flow(gray,flow)
        #print("es mou!!!")
        isMov = locate(gray,flow)
        if isMov==True:
            draw_img = haar(gray)
            print(ncars)
        else:
            draw_img=gray
        z=0;
    else:
        z=z+1
        draw_img = gray
    
    cv2.imwrite('prova.jpg', draw_img)
    out.write(draw_img)
    rval, img = vc.read()
    
vc.release()
out.release()
tend=time.time()-t
print(tend)

